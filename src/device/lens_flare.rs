#[allow(unused_imports)]
use log::{debug, info, warn};

use crate::Device;
use crate::Framebuffer;
use crate::{Texture, R32F, RG32F};
use crate::{VertexAttribute, VertexAttributeKind, VertexLayout};
use rustfft::{num_complex::Complex, FFTplanner};
use zerocopy::{AsBytes, FromBytes};

#[repr(C)]
#[derive(AsBytes, FromBytes, Debug)]
pub struct FFTPassData {
    pub horizontal: u16,
    pub direction: u16,
    pub subtransform_size: u16,
    pub convolve: u16,
}

impl VertexLayout for FFTPassData {
    const VERTEX_LAYOUT: &'static [VertexAttribute] =
        &[VertexAttribute::new(0, 0, VertexAttributeKind::UShort4)];
}

// TODO: possible speed-ups:
//  - larger radix to reduce number of iterations (not viable without compute
//    shaders)
//  - complex-to-real/real-to-complex FFT speedups (not really worth the code
//    complexity increase)

impl Device {
    pub(crate) fn render_lens_flare(&mut self) {
        let mut location = self.load_path_traced_render_into_convolution_buffers();
        self.perform_convolution(&mut location);
        self.load_convolved_render_from_convolution_buffers(&mut location);
    }

    pub(crate) fn preprocess_filter(
        &mut self,
        aperture_grayscale: &[u8],
        cols: usize,
        rows: usize,
    ) {
        /*

        Goals of this method:

         - populate the convolution filter buffers

        Steps:

         1. compute the FFT of the aperture grayscale data at the provided resolution
         2. compute the point spread function from it by taking the magnitude at each point
         3. construct the filter for each wavelength
         4. do a GPU FFT pass using the existing logic to produce the convolution filters

        4 is already implemented since we do the same thing during convolution
        ideally 1/2 will be done on the GPU later on, but it's not a priority
        3 may as well be done on the GPU right away

        */

        // STEP 1. compute the 2D FFT of the aperture grayscale data

        let row_fft = FFTplanner::<f32>::new(false).plan_fft(cols);
        let col_fft = FFTplanner::<f32>::new(false).plan_fft(rows);

        let mut aperture_input = Vec::with_capacity(aperture_grayscale.len());

        for i in 0..(rows * cols) {
            aperture_input.push(Complex::from(aperture_grayscale[i] as f32 / 255.0));
        }

        // so sad that we can't just process in-place here

        for i in 0..rows {
            let row = &mut aperture_input[cols * i..cols * i + cols];

            let mut output = vec![Complex::<f32>::default(); row.len()];

            row_fft.process(row, &mut output);

            row.copy_from_slice(&output);
        }

        for i in 0..cols {
            let mut col = Vec::with_capacity(rows);

            for j in 0..rows {
                col.push(aperture_input[j * cols + i]);
            }

            let mut output = vec![Complex::<f32>::default(); col.len()];

            col_fft.process(&mut col, &mut output);

            for j in 0..rows {
                aperture_input[j * cols + i] = col[j];
            }
        }

        // TODO: this might be done by the prior FFT later on
        let norm = (rows as f32 * cols as f32).sqrt();

        // STEP 2: compute the point spread function
        // this is where we offset it so that it is centered on (W - 1) / 2, (H - 1) / 2

        // I also think this can be (rows - 1) / 2 * 2 + 1
        let psf_rows = if rows % 2 == 0 { rows - 1 } else { rows };
        let psf_cols = if cols % 2 == 0 { cols - 1 } else { cols };

        let mut psf = Vec::with_capacity(psf_rows * psf_cols);

        for y in 0..psf_rows {
            for x in 0..psf_cols {
                let px = (x + (cols - 1) / 2 + 2) % cols;
                let py = (y + (rows - 1) / 2 + 2) % rows;

                psf.push(aperture_input[py * cols + px].norm_sqr() / norm);
            }
        }

        // drop this into an R32F texture of resolution (rows - 1) * (cols - 1)?
        // we can reuse this texture later to avoid unnecessary FFT operations
        // TODO: for now just allocate it on the fly

        let mut texture: Texture<R32F> = Texture::new(self.gl.clone());
        texture.upload(psf_cols, psf_rows, &psf);

        // STEP 3: generate the filter (note: this is where we scale according
        // to aspect ratio and where we scale up to the convolution resolution)

        const WAVELENGTHS: &[f32] = &[
            0.003921569, 0.0, 0.011764706, 0.0,
            0.007843138, 0.0, 0.019607844, 0.0,
            0.007843138, 0.0, 0.019607844, 0.0,
            0.007843138, 0.0, 0.019607844, 0.0,
            0.007843138, 0.0, 0.023529412, 0.0,
            0.007843138, 0.0, 0.023529412, 0.0,
            0.007843138, 0.0, 0.023529412, 0.0,
            0.007843138, 0.0, 0.02745098, 0.0,
            0.007843138, 0.0, 0.02745098, 0.0,
            0.011764706, 0.0, 0.03137255, 0.0,
            0.011764706, 0.0, 0.03137255, 0.0,
            0.011764706, 0.0, 0.03529412, 0.0,
            0.011764706, 0.0, 0.03529412, 0.0,
            0.011764706, 0.0, 0.03529412, 0.0,
            0.015686275, 0.0, 0.039215688, 0.0,
            0.015686275, 0.0, 0.039215688, 0.0,
            0.015686275, 0.0, 0.043137256, 0.0,
            0.019607844, 0.0, 0.043137256, 0.0,
            0.019607844, 0.0, 0.047058824, 0.0,
            0.023529412, 0.0, 0.050980393, 0.0,
            0.023529412, 0.0, 0.050980393, 0.0,
            0.023529412, 0.0, 0.05490196, 0.0,
            0.02745098, 0.0, 0.05882353, 0.0,
            0.02745098, 0.0, 0.05882353, 0.0,
            0.03137255, 0.003921569, 0.0627451, 0.0,
            0.03529412, 0.003921569, 0.06666667, 0.0,
            0.03529412, 0.003921569, 0.07450981, 0.0,
            0.039215688, 0.003921569, 0.078431375, 0.0,
            0.043137256, 0.003921569, 0.08235294, 0.0,
            0.047058824, 0.003921569, 0.09019608, 0.0,
            0.047058824, 0.003921569, 0.09411765, 0.0,
            0.050980393, 0.003921569, 0.101960786, 0.0,
            0.05490196, 0.003921569, 0.105882354, 0.0,
            0.05882353, 0.003921569, 0.11372549, 0.0,
            0.0627451, 0.003921569, 0.12156863, 0.0,
            0.06666667, 0.007843138, 0.12941177, 0.0,
            0.07450981, 0.007843138, 0.13725491, 0.0,
            0.078431375, 0.007843138, 0.14509805, 0.0,
            0.08235294, 0.007843138, 0.15294118, 0.0,
            0.09019608, 0.011764706, 0.16078432, 0.0,
            0.09411765, 0.011764706, 0.17254902, 0.0,
            0.101960786, 0.011764706, 0.18431373, 0.0,
            0.105882354, 0.015686275, 0.19607843, 0.0,
            0.11372549, 0.015686275, 0.20784314, 0.0,
            0.11764706, 0.015686275, 0.21960784, 0.0,
            0.12156863, 0.019607844, 0.23137255, 0.0,
            0.1254902, 0.019607844, 0.24705882, 0.0,
            0.12941177, 0.023529412, 0.25882354, 0.0,
            0.13725491, 0.02745098, 0.27058825, 0.0,
            0.14117648, 0.02745098, 0.28627452, 0.0,
            0.14509805, 0.03137255, 0.29803923, 0.0,
            0.14509805, 0.03137255, 0.3137255, 0.0,
            0.15294118, 0.03529412, 0.3254902, 0.0,
            0.15686275, 0.03529412, 0.3372549, 0.0,
            0.15686275, 0.03529412, 0.34901962, 0.0,
            0.16078432, 0.039215688, 0.36078432, 0.0,
            0.16078432, 0.043137256, 0.38039216, 0.0,
            0.16470589, 0.047058824, 0.39215687, 0.0,
            0.16470589, 0.047058824, 0.40784314, 0.0,
            0.16470589, 0.050980393, 0.41960785, 0.0,
            0.16470589, 0.05490196, 0.4392157, 0.0,
            0.16470589, 0.05882353, 0.4509804, 0.0,
            0.16470589, 0.0627451, 0.4627451, 0.0,
            0.16078432, 0.06666667, 0.4745098, 0.0,
            0.16078432, 0.06666667, 0.4862745, 0.0,
            0.16078432, 0.07450981, 0.49803922, 0.0,
            0.15294118, 0.08627451, 0.49803922, 0.0,
            0.14509805, 0.09803922, 0.49019608, 0.0,
            0.13725491, 0.10980392, 0.4862745, 0.0,
            0.12941177, 0.12156863, 0.4862745, 0.0,
            0.12156863, 0.13725491, 0.48235294, 0.0,
            0.11372549, 0.14509805, 0.4745098, 0.0,
            0.101960786, 0.15294118, 0.47058824, 0.0,
            0.09411765, 0.16078432, 0.46666667, 0.0,
            0.08627451, 0.16862746, 0.4627451, 0.0,
            0.078431375, 0.1764706, 0.45490196, 0.0,
            0.06666667, 0.1882353, 0.4509804, 0.0,
            0.05882353, 0.19215687, 0.44313726, 0.0,
            0.050980393, 0.2, 0.4392157, 0.0,
            0.043137256, 0.20784314, 0.43137255, 0.0,
            0.03529412, 0.21568628, 0.42352942, 0.0,
            0.03529412, 0.21960784, 0.41960785, 0.0,
            0.03529412, 0.22352941, 0.4117647, 0.0,
            0.03529412, 0.23137255, 0.40784314, 0.0,
            0.03529412, 0.23529412, 0.40392157, 0.0,
            0.03529412, 0.23921569, 0.4, 0.0,
            0.039215688, 0.24705882, 0.4, 0.0,
            0.039215688, 0.2509804, 0.4, 0.0,
            0.043137256, 0.25882354, 0.4, 0.0,
            0.043137256, 0.2627451, 0.4, 0.0,
            0.043137256, 0.27058825, 0.4, 0.0,
            0.047058824, 0.2784314, 0.40392157, 0.0,
            0.047058824, 0.28627452, 0.40392157, 0.0,
            0.047058824, 0.2901961, 0.40784314, 0.0,
            0.050980393, 0.29803923, 0.40784314, 0.0,
            0.05490196, 0.30588236, 0.41568628, 0.0,
            0.05490196, 0.3137255, 0.41568628, 0.0,
            0.05490196, 0.31764707, 0.41568628, 0.0,
            0.05882353, 0.32941177, 0.41960785, 0.0,
            0.05882353, 0.3372549, 0.41960785, 0.0,
            0.05882353, 0.34509805, 0.41960785, 0.0,
            0.0627451, 0.3529412, 0.42352942, 0.0,
            0.0627451, 0.35686275, 0.42352942, 0.0,
            0.0627451, 0.3647059, 0.42352942, 0.0,
            0.0627451, 0.37254903, 0.42352942, 0.0,
            0.0627451, 0.38431373, 0.42352942, 0.0,
            0.06666667, 0.39215687, 0.42745098, 0.0,
            0.06666667, 0.4, 0.42745098, 0.0,
            0.07058824, 0.40784314, 0.42745098, 0.0,
            0.07450981, 0.41568628, 0.43137255, 0.0,
            0.07450981, 0.42352942, 0.43137255, 0.0,
            0.078431375, 0.43137255, 0.43529412, 0.0,
            0.078431375, 0.4392157, 0.43529412, 0.0,
            0.08235294, 0.4509804, 0.43529412, 0.0,
            0.08235294, 0.45882353, 0.43529412, 0.0,
            0.08627451, 0.46666667, 0.43529412, 0.0,
            0.09019608, 0.4745098, 0.4392157, 0.0,
            0.09019608, 0.48235294, 0.4392157, 0.0,
            0.09019608, 0.49019608, 0.4392157, 0.0,
            0.09019608, 0.5019608, 0.44313726, 0.0,
            0.09019608, 0.5137255, 0.44313726, 0.0,
            0.09019608, 0.5254902, 0.44313726, 0.0,
            0.09019608, 0.53333336, 0.44705883, 0.0,
            0.09019608, 0.54901963, 0.44705883, 0.0,
            0.09803922, 0.5568628, 0.4509804, 0.0,
            0.09803922, 0.5686275, 0.4509804, 0.0,
            0.101960786, 0.5803922, 0.45490196, 0.0,
            0.101960786, 0.5882353, 0.45490196, 0.0,
            0.105882354, 0.6, 0.45490196, 0.0,
            0.105882354, 0.6156863, 0.45490196, 0.0,
            0.10980392, 0.62352943, 0.45490196, 0.0,
            0.10980392, 0.63529414, 0.45490196, 0.0,
            0.11372549, 0.6431373, 0.45490196, 0.0,
            0.11372549, 0.65882355, 0.45490196, 0.0,
            0.11372549, 0.67058825, 0.45490196, 0.0,
            0.11372549, 0.6784314, 0.4509804, 0.0,
            0.11372549, 0.6901961, 0.4509804, 0.0,
            0.11372549, 0.7019608, 0.4509804, 0.0,
            0.11764706, 0.7137255, 0.44705883, 0.0,
            0.11764706, 0.7254902, 0.44313726, 0.0,
            0.12156863, 0.73333335, 0.4392157, 0.0,
            0.12156863, 0.74509805, 0.4392157, 0.0,
            0.1254902, 0.75686276, 0.43529412, 0.0,
            0.1254902, 0.7647059, 0.43137255, 0.0,
            0.12941177, 0.77254903, 0.42745098, 0.0,
            0.12941177, 0.78039217, 0.42352942, 0.0,
            0.12941177, 0.7882353, 0.42352942, 0.0,
            0.12941177, 0.79607844, 0.41960785, 0.0,
            0.12941177, 0.8039216, 0.4117647, 0.0,
            0.12941177, 0.8156863, 0.40392157, 0.0,
            0.12941177, 0.8235294, 0.39607844, 0.0,
            0.12941177, 0.83137256, 0.39215687, 0.0,
            0.12941177, 0.8392157, 0.38431373, 0.0,
            0.12941177, 0.84705883, 0.37254903, 0.0,
            0.13333334, 0.85490197, 0.36078432, 0.0,
            0.13333334, 0.8627451, 0.3529412, 0.0,
            0.13333334, 0.87058824, 0.34117648, 0.0,
            0.13725491, 0.8784314, 0.32941177, 0.0,
            0.15294118, 0.8862745, 0.3137255, 0.0,
            0.16470589, 0.8901961, 0.29803923, 0.0,
            0.18039216, 0.8980392, 0.28627452, 0.0,
            0.19215687, 0.9019608, 0.27450982, 0.0,
            0.21176471, 0.90588236, 0.25882354, 0.0,
            0.22745098, 0.9098039, 0.23921569, 0.0,
            0.2509804, 0.9137255, 0.22352941, 0.0,
            0.27058825, 0.91764706, 0.2, 0.0,
            0.28627452, 0.92156863, 0.18039216, 0.0,
            0.30980393, 0.92941177, 0.16078432, 0.0,
            0.33333334, 0.9254902, 0.15294118, 0.0,
            0.36078432, 0.9254902, 0.14509805, 0.0,
            0.3882353, 0.92156863, 0.14117648, 0.0,
            0.41568628, 0.92156863, 0.13725491, 0.0,
            0.4392157, 0.92156863, 0.13333334, 0.0,
            0.46666667, 0.91764706, 0.13333334, 0.0,
            0.4862745, 0.9137255, 0.13333334, 0.0,
            0.5058824, 0.9137255, 0.13333334, 0.0,
            0.5294118, 0.9098039, 0.13333334, 0.0,
            0.54901963, 0.90588236, 0.13333334, 0.0,
            0.5686275, 0.9019608, 0.12941177, 0.0,
            0.58431375, 0.9019608, 0.12941177, 0.0,
            0.6039216, 0.8980392, 0.12941177, 0.0,
            0.61960787, 0.89411765, 0.12941177, 0.0,
            0.63529414, 0.8862745, 0.12941177, 0.0,
            0.654902, 0.88235295, 0.12941177, 0.0,
            0.6666667, 0.8784314, 0.12941177, 0.0,
            0.68235296, 0.8745098, 0.12941177, 0.0,
            0.69803923, 0.87058824, 0.12941177, 0.0,
            0.7137255, 0.8627451, 0.12941177, 0.0,
            0.7294118, 0.85882354, 0.12941177, 0.0,
            0.7411765, 0.85490197, 0.12941177, 0.0,
            0.7529412, 0.8509804, 0.12941177, 0.0,
            0.77254903, 0.84705883, 0.12941177, 0.0,
            0.78431374, 0.84313726, 0.12941177, 0.0,
            0.79607844, 0.8392157, 0.12941177, 0.0,
            0.8117647, 0.83137256, 0.1254902, 0.0,
            0.8235294, 0.827451, 0.1254902, 0.0,
            0.8392157, 0.81960785, 0.1254902, 0.0,
            0.8509804, 0.8117647, 0.1254902, 0.0,
            0.8627451, 0.80784315, 0.1254902, 0.0,
            0.8745098, 0.8, 0.1254902, 0.0,
            0.8862745, 0.7882353, 0.1254902, 0.0,
            0.9019608, 0.78431374, 0.1254902, 0.0,
            0.9137255, 0.7764706, 0.1254902, 0.0,
            0.9254902, 0.76862746, 0.1254902, 0.0,
            0.92941177, 0.7607843, 0.13725491, 0.0,
            0.93333334, 0.7490196, 0.15294118, 0.0,
            0.9372549, 0.7372549, 0.17254902, 0.0,
            0.9411765, 0.7254902, 0.1882353, 0.0,
            0.94509804, 0.7176471, 0.20392157, 0.0,
            0.9490196, 0.70980394, 0.21568628, 0.0,
            0.9490196, 0.7019608, 0.22352941, 0.0,
            0.95686275, 0.6901961, 0.23529412, 0.0,
            0.95686275, 0.68235296, 0.24705882, 0.0,
            0.9607843, 0.6745098, 0.25490198, 0.0,
            0.9607843, 0.6666667, 0.2627451, 0.0,
            0.9607843, 0.654902, 0.26666668, 0.0,
            0.9607843, 0.6431373, 0.27450982, 0.0,
            0.9607843, 0.63529414, 0.2784314, 0.0,
            0.9607843, 0.627451, 0.28235295, 0.0,
            0.9647059, 0.61960787, 0.28627452, 0.0,
            0.9647059, 0.6117647, 0.28627452, 0.0,
            0.9647059, 0.6039216, 0.2901961, 0.0,
            0.9647059, 0.5921569, 0.2901961, 0.0,
            0.9647059, 0.58431375, 0.2901961, 0.0,
            0.96862745, 0.5764706, 0.2901961, 0.0,
            0.96862745, 0.5686275, 0.2901961, 0.0,
            0.972549, 0.5568628, 0.28627452, 0.0,
            0.972549, 0.54901963, 0.28235295, 0.0,
            0.972549, 0.5411765, 0.28235295, 0.0,
            0.9764706, 0.5294118, 0.2784314, 0.0,
            0.9764706, 0.5176471, 0.27450982, 0.0,
            0.9764706, 0.50980395, 0.27058825, 0.0,
            0.9764706, 0.49803922, 0.26666668, 0.0,
            0.9764706, 0.49019608, 0.2627451, 0.0,
            0.98039216, 0.47843137, 0.25882354, 0.0,
            0.98039216, 0.47058824, 0.2509804, 0.0,
            0.98039216, 0.45490196, 0.24313726, 0.0,
            0.98039216, 0.44313726, 0.23529412, 0.0,
            0.98039216, 0.43137255, 0.22745098, 0.0,
            0.98039216, 0.42352942, 0.22352941, 0.0,
            0.9843137, 0.40784314, 0.21568628, 0.0,
            0.9882353, 0.39215687, 0.20784314, 0.0,
            0.9882353, 0.38039216, 0.2, 0.0,
            0.9882353, 0.36862746, 0.19215687, 0.0,
            0.99215686, 0.35686275, 0.18039216, 0.0,
            0.9882353, 0.34117648, 0.16470589, 0.0,
            0.9882353, 0.32156864, 0.15686275, 0.0,
            0.9882353, 0.30980393, 0.14509805, 0.0,
            0.9882353, 0.29411766, 0.13333334, 0.0,
            0.9882353, 0.27450982, 0.12156863, 0.0,
            0.9843137, 0.25882354, 0.10980392, 0.0,
            0.98039216, 0.24313726, 0.09803922, 0.0,
            0.9764706, 0.22745098, 0.08627451, 0.0,
            0.972549, 0.20784314, 0.07450981, 0.0,
            0.96862745, 0.1882353, 0.05882353, 0.0,
            0.9607843, 0.18039216, 0.05490196, 0.0,
            0.9490196, 0.16862746, 0.05490196, 0.0,
            0.9411765, 0.15686275, 0.050980393, 0.0,
            0.93333334, 0.14509805, 0.050980393, 0.0,
            0.92156863, 0.13725491, 0.050980393, 0.0,
            0.9019608, 0.13333334, 0.05490196, 0.0,
            0.8862745, 0.13333334, 0.0627451, 0.0,
            0.87058824, 0.13333334, 0.06666667, 0.0,
            0.85490197, 0.13333334, 0.07450981, 0.0,
            0.8352941, 0.13333334, 0.078431375, 0.0,
            0.81960785, 0.13333334, 0.08235294, 0.0,
            0.8039216, 0.13333334, 0.08235294, 0.0,
            0.7882353, 0.13333334, 0.08627451, 0.0,
            0.77254903, 0.13333334, 0.08627451, 0.0,
            0.75686276, 0.13725491, 0.09019608, 0.0,
            0.7411765, 0.13725491, 0.08627451, 0.0,
            0.72156864, 0.13725491, 0.078431375, 0.0,
            0.7058824, 0.13725491, 0.06666667, 0.0,
            0.6901961, 0.13725491, 0.05490196, 0.0,
            0.6745098, 0.13725491, 0.039215688, 0.0,
            0.654902, 0.13333334, 0.03137255, 0.0,
            0.6431373, 0.13333334, 0.03137255, 0.0,
            0.6313726, 0.12941177, 0.03137255, 0.0,
            0.61960787, 0.1254902, 0.02745098, 0.0,
            0.6039216, 0.12156863, 0.02745098, 0.0,
            0.5921569, 0.12156863, 0.02745098, 0.0,
            0.5803922, 0.11764706, 0.023529412, 0.0,
            0.5647059, 0.11372549, 0.023529412, 0.0,
            0.54901963, 0.11372549, 0.023529412, 0.0,
            0.5372549, 0.105882354, 0.023529412, 0.0,
            0.5254902, 0.101960786, 0.019607844, 0.0,
            0.5137255, 0.101960786, 0.019607844, 0.0,
            0.5019608, 0.09803922, 0.019607844, 0.0,
            0.49019608, 0.09803922, 0.019607844, 0.0,
            0.47843137, 0.09411765, 0.019607844, 0.0,
            0.46666667, 0.09411765, 0.019607844, 0.0,
            0.45490196, 0.09019608, 0.015686275, 0.0,
            0.44313726, 0.09019608, 0.015686275, 0.0,
            0.42745098, 0.08627451, 0.015686275, 0.0,
            0.41568628, 0.08235294, 0.015686275, 0.0,
            0.40392157, 0.08235294, 0.015686275, 0.0,
            0.39215687, 0.078431375, 0.011764706, 0.0,
            0.38431373, 0.078431375, 0.011764706, 0.0,
            0.37254903, 0.07450981, 0.011764706, 0.0,
            0.36078432, 0.07450981, 0.011764706, 0.0,
            0.3529412, 0.07450981, 0.011764706, 0.0,
            0.34509805, 0.07058824, 0.011764706, 0.0,
            0.33333334, 0.07058824, 0.011764706, 0.0,
            0.32156864, 0.06666667, 0.011764706, 0.0,
            0.3137255, 0.06666667, 0.011764706, 0.0,
            0.30588236, 0.06666667, 0.011764706, 0.0,
            0.29803923, 0.0627451, 0.007843138, 0.0,
            0.2901961, 0.0627451, 0.007843138, 0.0,
            0.28235295, 0.05882353, 0.007843138, 0.0,
            0.27058825, 0.05882353, 0.007843138, 0.0,
            0.2627451, 0.05490196, 0.007843138, 0.0,
            0.25490198, 0.05490196, 0.007843138, 0.0,
            0.24705882, 0.050980393, 0.003921569, 0.0,
            0.23921569, 0.047058824, 0.003921569, 0.0,
            0.23137255, 0.047058824, 0.003921569, 0.0,
            0.22352941, 0.047058824, 0.003921569, 0.0,
            0.21176471, 0.043137256, 0.003921569, 0.0,
            0.20392157, 0.043137256, 0.003921569, 0.0,
            0.19607843, 0.043137256, 0.003921569, 0.0,
            0.19215687, 0.039215688, 0.003921569, 0.0,
            0.18431373, 0.039215688, 0.003921569, 0.0,
            0.18039216, 0.039215688, 0.003921569, 0.0,
            0.17254902, 0.03529412, 0.003921569, 0.0,
            0.16862746, 0.03529412, 0.003921569, 0.0,
            0.16078432, 0.03137255, 0.003921569, 0.0,
            0.15686275, 0.03137255, 0.003921569, 0.0,
            0.15294118, 0.03137255, 0.003921569, 0.0,
            0.14509805, 0.02745098, 0.0, 0.0,
            0.14117648, 0.02745098, 0.0, 0.0,
            0.13725491, 0.023529412, 0.0, 0.0,
            0.13333334, 0.023529412, 0.0, 0.0,
            0.1254902, 0.019607844, 0.0, 0.0,
            0.1254902, 0.019607844, 0.0, 0.0,
            0.12156863, 0.019607844, 0.0, 0.0,
            0.12156863, 0.015686275, 0.0, 0.0,
            0.11764706, 0.015686275, 0.0, 0.0,
            0.11764706, 0.015686275, 0.0, 0.0,
            0.11372549, 0.011764706, 0.0, 0.0,
            0.10980392, 0.011764706, 0.0, 0.0,
            0.10980392, 0.011764706, 0.0, 0.0,
            0.105882354, 0.011764706, 0.0, 0.0,
            0.09803922, 0.011764706, 0.0, 0.0,
            0.09803922, 0.007843138, 0.0, 0.0,
            0.09411765, 0.007843138, 0.0, 0.0,
            0.09411765, 0.007843138, 0.0, 0.0,
            0.09019608, 0.007843138, 0.0, 0.0,
            0.09019608, 0.007843138, 0.0, 0.0,
            0.08627451, 0.003921569, 0.0, 0.0,
            0.08235294, 0.003921569, 0.0, 0.0,
            0.08235294, 0.003921569, 0.0, 0.0,
            0.078431375, 0.003921569, 0.0, 0.0,
            0.07450981, 0.003921569, 0.0, 0.0,
            0.07058824, 0.003921569, 0.0, 0.0,
            0.07058824, 0.003921569, 0.0, 0.0,
            0.06666667, 0.003921569, 0.0, 0.0,
            0.06666667, 0.003921569, 0.0, 0.0,
            0.0627451, 0.003921569, 0.0, 0.0,
            0.05882353, 0.003921569, 0.0, 0.0,
            0.05490196, 0.003921569, 0.0, 0.0,
            0.05490196, 0.003921569, 0.0, 0.0,
            0.050980393, 0.003921569, 0.0, 0.0,
            0.047058824, 0.003921569, 0.0, 0.0,
            0.043137256, 0.003921569, 0.0, 0.0,
            0.043137256, 0.003921569, 0.0, 0.0,
            0.039215688, 0.003921569, 0.0, 0.0,
            0.03529412, 0.003921569, 0.0, 0.0,
            0.03137255, 0.003921569, 0.0, 0.0,
            0.03137255, 0.003921569, 0.0, 0.0,
            0.02745098, 0.003921569, 0.0, 0.0,
            0.023529412, 0.003921569, 0.0, 0.0,
        ];

        // upload these wavelengths to a 1D texture, and sample them during filter processing
        // prepare an RGBA texture to store the results in, and an FBO to render into it
        // the output texture will have size rows x cols, and the shader will shift the pixels
        // by width / 2 - 1, and the central row/col (for even row/col) will be zero (unused)
        // only at that point will it be ready to be convolved

        // TODO

        // STEP 4: compute FFT (we can actually reuse the FFT passes previously defined, just
        // stopping at the forward rows/columns and without requesting any convolution)
        // so at this point all we need is to just load the convolution filter, and run the
        // FFT passes. but... can we just load it into the bottom left as before?
        //  => yes we can
        // so we just need to have an RGB texture for the RGB convolution filter, and we can
        // just invoke the load_into_convolution_buffers and FFT shaders, outputting the final
        // result into the aperture spectrum buffers!

        // TODO
    }

    pub(crate) fn prepare_fft_pass_data(&mut self) {
        let mut passes = vec![];

        // forward passes, rows

        let mut m = 2;

        while m <= 2048 {
            for _ in 0..3 {
                passes.push(FFTPassData {
                    horizontal: 1,
                    direction: 1,                // "forward"
                    subtransform_size: 4096 / m, // inverse order
                    convolve: 0,
                });
            }

            m *= 2;
        }

        // forward passes, columns

        let mut m = 2;

        while m <= 1024 {
            for _ in 0..3 {
                passes.push(FFTPassData {
                    horizontal: 0,
                    direction: 1,                // "forward"
                    subtransform_size: 2048 / m, // inverse order
                    convolve: (m == 1024) as u16,
                });
            }

            m *= 2;
        }

        // inverse passes, columns

        let mut m = 2;

        while m <= 1024 {
            for _ in 0..3 {
                passes.push(FFTPassData {
                    horizontal: 0,
                    direction: 0, // "inverse"
                    subtransform_size: m,
                    convolve: 0, // m == 0 if we want to do it inline here?
                });
            }

            m *= 2;
        }

        // inverse passes, rows

        let mut m = 2;

        while m <= 2048 {
            for _ in 0..3 {
                passes.push(FFTPassData {
                    horizontal: 1,
                    direction: 0, // "inverse"
                    subtransform_size: m,
                    convolve: 0,
                });
            }

            m *= 2;
        }

        info!("FFT passes: {:?}", passes);

        self.fft_pass_data.upload(&passes);
    }

    fn load_path_traced_render_into_convolution_buffers(&mut self) -> DataLocation {
        let command = self.load_convolution_buffers_shader.begin_draw();

        command.bind(&self.samples, "image");

        command.set_viewport(0, 0, 2048, 1024);
        command.set_framebuffer(&self.spectrum_temp1_fbo);

        command.unset_vertex_array();
        command.draw_triangles(0, 1);

        DataLocation::Temp1
    }

    fn source_r_buffer(&self, location: DataLocation) -> &Texture<RG32F> {
        match location {
            DataLocation::Temp1 => &self.rspectrum_temp1,
            DataLocation::Temp2 => &self.rspectrum_temp2,
        }
    }

    fn source_g_buffer(&self, location: DataLocation) -> &Texture<RG32F> {
        match location {
            DataLocation::Temp1 => &self.gspectrum_temp1,
            DataLocation::Temp2 => &self.gspectrum_temp2,
        }
    }

    fn source_b_buffer(&self, location: DataLocation) -> &Texture<RG32F> {
        match location {
            DataLocation::Temp1 => &self.bspectrum_temp1,
            DataLocation::Temp2 => &self.bspectrum_temp2,
        }
    }

    fn target_framebuffer(&self, location: DataLocation) -> &Framebuffer {
        match location {
            DataLocation::Temp1 => &self.spectrum_temp2_fbo,
            DataLocation::Temp2 => &self.spectrum_temp1_fbo,
        }
    }

    fn perform_convolution(&mut self, location: &mut DataLocation) {
        let command = self.fft_shader.begin_draw();

        command.set_vertex_array(&self.fft_pass_data);

        command.bind(&self.r_aperture_spectrum, "r_conv_filter");
        command.bind(&self.g_aperture_spectrum, "g_conv_filter");
        command.bind(&self.b_aperture_spectrum, "b_conv_filter");

        command.set_viewport(0, 0, 2048, 1024);

        for triangle_index in 0..(self.fft_pass_data.vertex_count() / 3) {
            command.bind(self.source_r_buffer(*location), "r_conv_buffer");
            command.bind(self.source_g_buffer(*location), "g_conv_buffer");
            command.bind(self.source_b_buffer(*location), "b_conv_buffer");

            command.set_framebuffer(self.target_framebuffer(*location));

            command.draw_triangles(triangle_index, 1);

            location.swap();
        }

        self.fft_pass_data.unbind();
    }

    fn load_convolved_render_from_convolution_buffers(&mut self, location: &mut DataLocation) {
        let command = self.read_convolution_buffers_shader.begin_draw();

        command.bind(self.source_r_buffer(*location), "r_conv_buffer");
        command.bind(self.source_g_buffer(*location), "g_conv_buffer");
        command.bind(self.source_b_buffer(*location), "b_conv_buffer");

        command.bind(&self.samples, "source");

        command.set_framebuffer(&self.render_fbo);

        command.set_viewport(0, 0, self.render.cols() as i32, self.render.rows() as i32);

        command.unset_vertex_array();
        command.draw_triangles(0, 1);
    }
}

#[derive(Clone, Copy)]
enum DataLocation {
    Temp1,
    Temp2,
}

impl DataLocation {
    pub fn swap(&mut self) {
        match self {
            DataLocation::Temp1 => *self = DataLocation::Temp2,
            DataLocation::Temp2 => *self = DataLocation::Temp1,
        }
    }
}
